name: Wii Build CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  syntax-check:
    runs-on: ubuntu-latest
    name: Code Quality and Syntax Check

    steps:
    - uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential g++ cppcheck clang-format

    - name: Create mock headers for Wii libraries
      run: |
        mkdir -p mock_includes
        
        # Basic type definitions
        cat > mock_includes/gctypes.h << 'EOF'
        #ifndef __GCTYPES_H__
        #define __GCTYPES_H__
        #include <stdint.h>
        #include <stdbool.h>
        typedef uint8_t u8;
        typedef uint16_t u16;
        typedef uint32_t u32;
        typedef uint64_t u64;
        #endif
        EOF
        
        # GRRLIB mock
        cat > mock_includes/grrlib.h << 'EOF'
        #ifndef __GRRLIB_H__
        #define __GRRLIB_H__
        #include "gctypes.h"
        typedef struct { u8 data[4]; } GRRLIB_texImg;
        inline void GRRLIB_Rectangle(float x, float y, float w, float h, u32 c, int f) {}
        inline void GRRLIB_Render(void) {}
        inline void GRRLIB_Init(void) {}
        inline void GRRLIB_Exit(void) {}
        inline void GRRLIB_FillScreen(u32 color) {}
        inline void GRRLIB_Line(float x1, float y1, float x2, float y2, u32 color) {}
        #endif
        EOF
        
        # GameCube/Wii core mock
        cat > mock_includes/gccore.h << 'EOF'
        #ifndef __GCCORE_H__
        #define __GCCORE_H__
        #include "gctypes.h"
        
        // System functions
        inline void VIDEO_Init(void) {}
        inline void VIDEO_SetBlack(int) {}
        inline void VIDEO_Flush(void) {}
        inline void VIDEO_WaitVSync(void) {}
        inline void SYS_SetResetCallback(void (*)(void)) {}
        inline void SYS_SetPowerCallback(void (*)(void)) {}
        inline void SYS_ResetSystem(int, u32, int) {}
        
        #define SYS_RETURNTOMENU 0
        #define SYS_POWEROFF 1
        #define SYS_RESTART 2
        
        // FAT filesystem
        typedef struct DISC_INTERFACE DISC_INTERFACE;
        inline bool fatInitDefault(void) { return true; }
        inline bool fatUnmount(const char*) { return true; }
        inline bool fatMount(const char*, const DISC_INTERFACE*, u32, u32, u32) { return true; }
        #endif
        EOF
        
        # Audio library mock
        cat > mock_includes/asndlib.h << 'EOF'
        #ifndef __ASNDLIB_H__
        #define __ASNDLIB_H__
        #include "gctypes.h"
        inline int ASND_Init(void) { return 0; }
        inline void ASND_End(void) {}
        inline void ASND_Pause(int) {}
        inline int ASND_SetVoice(int, int, int, int, void*, u32, int, int, void (*)(int)) { return 0; }
        inline int ASND_StopVoice(int) { return 0; }
        #define VOICE_MONO16 0
        #define VOICE_STEREO16 1
        #endif
        EOF
        
        # Wiiuse/WPAD headers (separate structure for compatibility)
        mkdir -p mock_includes/wiiuse
        cat > mock_includes/wiiuse/wpad.h << 'EOF'
        #ifndef __WPAD_H__
        #define __WPAD_H__
        #include "../gctypes.h"
        
        // WPAD (Wiimote) definitions
        #define WPAD_BUTTON_A 0x0008
        #define WPAD_BUTTON_B 0x0004
        #define WPAD_BUTTON_1 0x0002
        #define WPAD_BUTTON_2 0x0001
        #define WPAD_BUTTON_HOME 0x0080
        #define WPAD_BUTTON_PLUS 0x0010
        #define WPAD_BUTTON_MINUS 0x1000
        #define WPAD_CHAN_ALL 0xFF
        #define WPAD_FMT_BTNS_ACC_IR 0
        
        typedef struct WPADData WPADData;
        
        inline int WPAD_Init(void) { return 0; }
        inline int WPAD_ScanPads(void) { return 0; }
        inline int WPAD_Shutdown(void) { return 0; }
        inline u32 WPAD_ButtonsDown(int chan) { return 0; }
        inline u32 WPAD_ButtonsHeld(int chan) { return 0; }
        inline int WPAD_SetDataFormat(int chan, int fmt) { return 0; }
        #endif
        EOF
        
        # SD card interface
        mkdir -p mock_includes/sdcard
        cat > mock_includes/sdcard/wiisd_io.h << 'EOF'
        #ifndef __WIISD_IO_H__
        #define __WIISD_IO_H__
        #include "../gctypes.h"
        extern const void* __io_wiisd;
        inline bool wiisd_Initialize(void) { return true; }
        inline bool wiisd_IsInserted(void) { return true; }
        inline bool wiisd_ReadSectors(u32, u32, void*) { return true; }
        inline bool wiisd_WriteSectors(u32, u32, const void*) { return true; }
        #endif
        EOF

    - name: Compile source files for syntax checking
      run: |
        echo "Compiling source files to check for syntax errors..."
        
        for cpp_file in $(find source -name "*.cpp"); do
          echo "Checking $cpp_file..."
          g++ -std=c++11 -Wall -Wextra -I./include -I./mock_includes \
              -DGEKKO -c "$cpp_file" -o "/tmp/$(basename $cpp_file .cpp).o" || exit 1
        done
        
        echo "✓ All source files compiled successfully"

    - name: Run static analysis
      run: |
        echo "Running cppcheck static analysis..."
        cppcheck \
          --enable=all \
          --std=c++11 \
          --platform=unix32 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --error-exitcode=0 \
          --inline-suppr \
          -I./include \
          -I./mock_includes \
          source/
        echo "✓ Static analysis completed"
      continue-on-error: true

    - name: Build summary
      run: |
        echo "=================================="
        echo "BUILD SUMMARY"
        echo "=================================="
        echo "✓ Source files syntax check: PASSED"
        echo "✓ Static analysis: COMPLETED"
        echo "✓ Headers structure: VALID"
        echo ""
        echo "Project structure:"
        echo "- Source files: $(find source -name "*.cpp" | wc -l)"
        echo "- Header files: $(find include -name "*.h" | wc -l)"
        echo ""
        echo "This CI validates code quality and structure."
        echo "For actual Wii builds, use a local devkitPro environment."

  wii-build-attempt:
    runs-on: ubuntu-latest
    name: Wii Build Attempt (Experimental)
    continue-on-error: true

    steps:
    - uses: actions/checkout@v4

    - name: Install devkitPro (Real environment)
      run: |
        # Try to install the real devkitPro environment
        sudo apt update
        sudo apt install -y curl build-essential
        
        # Download and install devkitPro package manager
        curl -L https://github.com/devkitPro/pacman/releases/latest/download/devkitpro-pacman.amd64.deb -o devkitpro-pacman.deb
        sudo dpkg -i devkitpro-pacman.deb || sudo apt-get install -f -y
        
        # Install Wii development tools
        sudo dkp-pacman -Sy --noconfirm wii-dev
        
        # Set up environment
        echo "/opt/devkitpro/devkitPPC/bin" >> $GITHUB_PATH
        echo "/opt/devkitpro/tools/bin" >> $GITHUB_PATH
        echo "DEVKITPRO=/opt/devkitpro" >> $GITHUB_ENV
        echo "DEVKITPPC=/opt/devkitpro/devkitPPC" >> $GITHUB_ENV
        
    - name: Build with real devkitPro
      run: |
        echo "Attempting build with real devkitPro environment..."
        make clean
        make -j$(nproc) || echo "Build failed, but that's expected in CI"
        
        # Check what was created
        ls -la || true
        ls -la build/ || true
      continue-on-error: true

    - name: Upload build artifacts (if any)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-attempt-${{ github.sha }}
        path: |
          *.elf
          *.dol
          build/
          apps/
        if-no-files-found: ignore