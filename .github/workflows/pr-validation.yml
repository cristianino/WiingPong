name: PR Validation

on:
  pull_request:
    branches: [ master, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

# Add permissions for GitHub Actions to write comments
permissions:
  contents: read          # Read repository contents
  pull-requests: write    # Write to pull requests (for comments)
  issues: write           # Write to issues (for comments)
  checks: write           # Write check results

env:
  DEVKITPRO: /opt/devkitpro
  DEVKITPPC: /opt/devkitpro/devkitPPC

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    container: devkitpro/devkitppc:latest
    env:
      DEVKITPRO: /opt/devkitpro
      DEVKITPPC: /opt/devkitpro/devkitPPC
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Configure Git safe directory
      run: |
        git config --global --add safe.directory /__w/WiingPong/WiingPong
        git config --global --add safe.directory /github/workspace
        git config --global --add safe.directory .

    - name: Setup DevkitPro environment
      run: |
        echo "Setting up DevkitPro environment..."
        echo "DEVKITPRO=/opt/devkitpro" >> $GITHUB_ENV
        echo "DEVKITPPC=/opt/devkitpro/devkitPPC" >> $GITHUB_ENV
        echo "/opt/devkitpro/devkitPPC/bin" >> $GITHUB_PATH
        echo "/opt/devkitpro/tools/bin" >> $GITHUB_PATH
        echo "/opt/devkitpro/pacman/bin" >> $GITHUB_PATH

    - name: Install Wii development libraries
      run: |
        echo "Installing Wii development libraries..."
        echo "Attempting to sync package databases (with retries)..."
        for i in {1..3}; do
          echo "Attempt $i/3"
          if dkp-pacman -Sy --noconfirm; then
            echo "Successfully synced package databases"
            break
          else
            echo "Failed attempt $i, waiting 10 seconds..."
            sleep 10
          fi
        done
        
        echo "Installing packages..."
        dkp-pacman -S --noconfirm libogc libfat-ogc devkitppc-rules ppc-libpng ppc-zlib ppc-freetype
        
    - name: Install GRRLIB from source
      run: |
        echo "Compiling GRRLIB from source..."
        cd /tmp
        git clone https://github.com/GRRLIB/GRRLIB.git
        cd GRRLIB/GRRLIB
        make clean all install
        echo "GRRLIB installation completed"

    - name: Verify DevkitPro installation
      run: |
        echo "DevkitPro environment verification:"
        echo "DEVKITPRO: $DEVKITPRO"
        echo "DEVKITPPC: $DEVKITPPC"
        dkp-pacman --version
        powerpc-eabi-gcc --version

    - name: Install git (required for git-flow checks)
      run: |
        apt-get update && apt-get install -y git

    - name: Build Debug Configuration
      run: |
        make clean
        make CONFIG=debug
        echo "‚úÖ Debug build successful"

    - name: Build Release Configuration
      run: |
        make clean  
        make CONFIG=release
        echo "‚úÖ Release build successful"

    - name: Validate binary outputs
      run: |
        if [ ! -f "WiingPong.dol" ]; then
          echo "‚ùå WiingPong.dol not found!"
          exit 1
        fi
        
        if [ ! -f "WiingPong.elf" ]; then
          echo "‚ùå WiingPong.elf not found!"
          exit 1
        fi
        
        echo "‚úÖ Binary outputs validated"

    - name: Check for merge conflicts
      run: |
        echo "Fetching base branch..."
        git fetch origin ${{ github.event.pull_request.base.ref }}
        
        echo "Checking for merge conflicts..."
        BASE_REF="origin/${{ github.event.pull_request.base.ref }}"
        
        if git merge-tree "$(git merge-base HEAD "$BASE_REF")" HEAD "$BASE_REF" | grep -q "<<<<<<< "; then
          echo "‚ùå Merge conflicts detected!"
          exit 1
        else
          echo "‚úÖ No merge conflicts detected"
        fi

    - name: Validate git-flow branch naming
      run: |
        BRANCH_NAME='${{ github.event.pull_request.head.ref }}'
        BASE_BRANCH='${{ github.event.pull_request.base.ref }}'
        
        echo "PR from: $BRANCH_NAME to: $BASE_BRANCH"
        
        # Check if branch follows git-flow conventions
        if [ "$BASE_BRANCH" = "master" ]; then
          # PRs to master should come from release/* or hotfix/*
          case "$BRANCH_NAME" in
            release/*|hotfix/*)
              echo "‚úÖ Valid git-flow branch for master: $BRANCH_NAME"
              ;;
            *)
              echo "‚ö†Ô∏è Warning: PR to master should typically come from release/* or hotfix/* branch"
              ;;
          esac
        elif [ "$BASE_BRANCH" = "develop" ]; then
          # PRs to develop can come from feature/* or hotfix/* or copilot/*
          case "$BRANCH_NAME" in
            feature/*|hotfix/*|copilot/*)
              echo "‚úÖ Valid git-flow branch for develop: $BRANCH_NAME"
              ;;
            *)
              echo "‚ö†Ô∏è Info: PR to develop from $BRANCH_NAME (not following strict git-flow naming)"
              ;;
          esac
        fi

    - name: Analyze changed files
      run: |
        BASE_REF="origin/${{ github.event.pull_request.base.ref }}"
        
        echo "Files changed in this PR:"
        git diff --name-only "$BASE_REF"...HEAD
        
        echo ""
        echo "Lines changed:"
        git diff --stat "$BASE_REF"...HEAD

    - name: Comment on PR
      if: github.event.action == 'opened'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Get build info
          const debugBuild = "‚úÖ Debug build: PASSED";
          const releaseBuild = "‚úÖ Release build: PASSED";
          
          const comment = `
          ## üîç PR Validation Results
          
          ${debugBuild}
          ${releaseBuild}
          
          ### Build Artifacts Generated:
          - \`WiingPong.dol\` - Main executable for Wii
          - \`WiingPong.elf\` - Debug symbols
          
          ### Next Steps:
          - [ ] Code review by maintainer
          - [ ] Manual testing if needed
          - [ ] Merge when ready
          
          *This comment was automatically generated by GitHub Actions.*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure Git safe directory
      run: |
        git config --global --add safe.directory /github/workspace
        git config --global --add safe.directory .
      
    - name: Run security scan
      run: |
        echo "üîç Running basic security checks..."
        
        # Check for hardcoded secrets/passwords
        if grep -r -i "password\|secret\|key\|token" --include="*.cpp" --include="*.h" source/ include/ 2>/dev/null; then
          echo "‚ö†Ô∏è Found potential hardcoded secrets - please review"
        else
          echo "‚úÖ No obvious hardcoded secrets found"
        fi
        
        # Check for unsafe functions
        if grep -r "strcpy\|strcat\|sprintf\|gets" --include="*.cpp" --include="*.h" source/ include/ 2>/dev/null; then
          echo "‚ö†Ô∏è Found potentially unsafe C functions - consider safer alternatives"
        else
          echo "‚úÖ No obviously unsafe C functions found"
        fi
