name: Wii Build CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install devkitPro
      run: |
        sudo apt update
        sudo apt install -y wget curl build-essential
        
        # Use a simple but effective approach - direct installation from Arch repos
        echo "Installing devkitPro tools..."
        
        # Create devkitPro directory structure
        sudo mkdir -p /opt/devkitpro
        
        # Download and extract devkitPPC precompiled toolchain
        echo "Downloading devkitPPC toolchain..."
        wget -q https://github.com/devkitPro/buildscripts/releases/download/devkitPPC-r39-3/devkitPPC-linux.tar.xz -O devkitPPC.tar.xz
        
        if [ ! -f devkitPPC.tar.xz ] || [ ! -s devkitPPC.tar.xz ]; then
          echo "Failed to download devkitPPC, trying alternative..."
          # Alternative: use known working mirror
          wget -q https://wii.leseratte10.de/devkitPro/devkitPPC-linux.tar.xz -O devkitPPC.tar.xz || {
            echo "All download attempts failed, exiting..."
            exit 1
          }
        fi
        
        # Extract devkitPPC
        sudo tar -xf devkitPPC.tar.xz -C /opt/devkitpro/
        
        # Download libogc
        echo "Downloading libogc..."
        wget -q https://github.com/devkitPro/libogc/releases/latest/download/libogc-linux.tar.bz2 -O libogc.tar.bz2 || {
          echo "Failed to download libogc from GitHub, trying alternative..."
          wget -q https://wii.leseratte10.de/devkitPro/libogc-linux.tar.bz2 -O libogc.tar.bz2
        }
        
        if [ -f libogc.tar.bz2 ] && [ -s libogc.tar.bz2 ]; then
          sudo tar -xf libogc.tar.bz2 -C /opt/devkitpro/
        fi
        
        # Download GRRLIB
        echo "Downloading GRRLIB..."
        wget -q https://github.com/GRRLIB/GRRLIB/releases/latest/download/GRRLIB-linux.tar.bz2 -O grrlib.tar.bz2 || {
          echo "Failed to download GRRLIB, continuing without it..."
        }
        
        if [ -f grrlib.tar.bz2 ] && [ -s grrlib.tar.bz2 ]; then
          sudo tar -xf grrlib.tar.bz2 -C /opt/devkitpro/
        fi
        
        # Set proper permissions
        sudo chown -R root:root /opt/devkitpro
        sudo chmod -R 755 /opt/devkitpro
        
        # Create simple verification
        if [ -d "/opt/devkitpro/devkitPPC" ] && [ -f "/opt/devkitpro/devkitPPC/bin/powerpc-eabi-gcc" ]; then
          echo "devkitPPC installation successful"
          /opt/devkitpro/devkitPPC/bin/powerpc-eabi-gcc --version
        else
          echo "devkitPPC installation verification failed"
          ls -la /opt/devkitpro/
          exit 1
        fi

    - name: Setup environment
      run: |
        echo "/opt/devkitpro/devkitPPC/bin" >> $GITHUB_PATH
        echo "/opt/devkitpro/tools/bin" >> $GITHUB_PATH
        echo "DEVKITPRO=/opt/devkitpro" >> $GITHUB_ENV
        echo "DEVKITPPC=/opt/devkitpro/devkitPPC" >> $GITHUB_ENV

    - name: Build with Make
      run: |
        make clean
        make -j$(nproc)

    - name: Create package
      run: make package

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WiingPong-build-${{ github.sha }}
        path: |
          WiingPong.elf
          WiingPong.dol
          apps/

    - name: Install cppcheck
      run: sudo apt-get update && sudo apt-get install -y cppcheck

    - name: Run static analysis (cppcheck)
      run: |
        cppcheck \
          --enable=all \
          --std=c++11 \
          --platform=unix32 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --error-exitcode=0 \
          --quiet \
          source/
      continue-on-error: true