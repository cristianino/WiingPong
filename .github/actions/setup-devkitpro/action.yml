name: 'Setup DevkitPro'
description: 'Install DevkitPro toolchain for Wii development'
inputs:
  packages:
    description: 'DevkitPro packages to install (space-separated)'
    required: false
    default: 'wii-dev'
outputs:
  devkitpro-version:
    description: 'Installed DevkitPro version'
    value: ${{ steps.version.outputs.version }}
runs:
  using: 'composite'
  steps:
    - name: Cache DevkitPro installation
      uses: actions/cache@v4
      id: cache-devkitpro
      with:
        path: /opt/devkitpro
        key: devkitpro-${{ runner.os }}-${{ hashFiles('.github/actions/setup-devkitpro/action.yml') }}
        restore-keys: |
          devkitpro-${{ runner.os }}-

    - name: Install DevkitPro
      if: steps.cache-devkitpro.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Installing DevkitPro toolchain..."
        
        # Update package lists
        sudo apt update
        sudo apt install -y wget gnupg curl
        
        # Method 1: Try APT repository (preferred)
        echo "Attempting APT repository installation..."
        if wget -q --timeout=10 -O- https://apt.devkitpro.org/devkitpro-pub.gpg | sudo gpg --dearmor -o /usr/share/keyrings/devkitpro-pub.gpg 2>/dev/null; then
          echo "deb [signed-by=/usr/share/keyrings/devkitpro-pub.gpg] https://apt.devkitpro.org stable main" | sudo tee /etc/apt/sources.list.d/devkitpro.list
          sudo apt update
          if sudo apt install -y devkitpro-pacman; then
            echo "✅ APT repository installation successful"
            INSTALL_METHOD="apt"
          else
            echo "❌ APT repository installation failed"
            INSTALL_METHOD="fallback"
          fi
        else
          echo "❌ Could not access APT repository"
          INSTALL_METHOD="fallback"
        fi
        
        # Method 2: Fallback to manual installation
        if [ "$INSTALL_METHOD" = "fallback" ]; then
          echo "Attempting manual installation..."
          
          # Try to download and install manually
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          # Try multiple sources for the package
          DOWNLOAD_SUCCESS=false
          for URL in \
            "https://github.com/devkitPro/pacman/releases/download/v1.0.3/devkitpro-pacman.amd64.deb" \
            "https://github.com/devkitPro/pacman/releases/download/v1.0.2/devkitpro-pacman.amd64.deb" \
            "https://github.com/devkitPro/pacman/releases/download/v1.0.1/devkitpro-pacman.amd64.deb"; do
            echo "Trying: $URL"
            if wget -q --timeout=10 "$URL" -O devkitpro-pacman.deb; then
              if sudo dpkg -i devkitpro-pacman.deb; then
                echo "✅ Manual installation successful with $URL"
                DOWNLOAD_SUCCESS=true
                break
              else
                echo "❌ Failed to install package from $URL"
              fi
            else
              echo "❌ Failed to download from $URL"
            fi
          done
          
          if [ "$DOWNLOAD_SUCCESS" = "false" ]; then
            echo "❌ All installation methods failed"
            exit 1
          fi
          
          cd -
          rm -rf "$TEMP_DIR"
        fi

    - name: Setup DevkitPro environment
      shell: bash
      run: |
        # Set environment variables
        echo "DEVKITPRO=/opt/devkitpro" >> $GITHUB_ENV
        echo "DEVKITPPC=/opt/devkitpro/devkitPPC" >> $GITHUB_ENV
        echo "DEVKITARM=/opt/devkitpro/devkitARM" >> $GITHUB_ENV
        echo "/opt/devkitpro/tools/bin" >> $GITHUB_PATH
        echo "/opt/devkitpro/pacman/bin" >> $GITHUB_PATH

    - name: Install development packages
      shell: bash
      run: |
        # Update pacman database
        sudo dkp-pacman -Sy
        
        # Install requested packages
        echo "Installing packages: ${{ inputs.packages }}"
        sudo dkp-pacman -S ${{ inputs.packages }} --noconfirm

    - name: Verify installation
      shell: bash
      id: version
      run: |
        echo "DevkitPro installation verification:"
        ls -la /opt/devkitpro/
        
        if command -v dkp-pacman >/dev/null 2>&1; then
          echo "✅ dkp-pacman is available"
          VERSION=$(dkp-pacman --version | head -n1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "❌ dkp-pacman not found"
          exit 1
        fi
        
        if command -v powerpc-eabi-gcc >/dev/null 2>&1; then
          echo "✅ PowerPC compiler is available"
          powerpc-eabi-gcc --version | head -n1
        else
          echo "❌ PowerPC compiler not found"
          exit 1
        fi
        
        echo "✅ DevkitPro setup completed successfully"
